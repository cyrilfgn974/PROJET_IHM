/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author cyril
 */
public class ModePanel extends javax.swing.JPanel {

    /**
     * Creates new form ModePanel
     */
    public ModePanel() {
        initComponents();
        switchStateMods(StateMods.OFF);
    }
    private enum StateMods {
        OFF, WXON, TST, WXA, STDBY;
       
    }
    private StateMods currentMod;
    private void switchStateMods(StateMods mod) {
        currentMod = mod;
        switch(mod){
            case OFF:
                OFFradio.setSelected(true);
                WXONradio.setSelected(false);
                TSTradio.setSelected(false);
                WXAradio.setSelected(false);
                STDBYradio.setSelected(false);
                break;
            case WXON:
                OFFradio.setSelected(false);
                WXONradio.setSelected(true);
                TSTradio.setSelected(false);
                WXAradio.setSelected(false);
                STDBYradio.setSelected(false);
                break;
            case TST:
                OFFradio.setSelected(false);
                WXONradio.setSelected(false);
                TSTradio.setSelected(true);
                WXAradio.setSelected(false);
                STDBYradio.setSelected(false);
                break;
            case WXA:
                OFFradio.setSelected(false);
                WXONradio.setSelected(false);
                TSTradio.setSelected(false);
                WXAradio.setSelected(true);
                STDBYradio.setSelected(false);
                break;
            case STDBY:
                OFFradio.setSelected(false);
                WXONradio.setSelected(false);
                TSTradio.setSelected(false);
                WXAradio.setSelected(false);
                STDBYradio.setSelected(true);
                break;
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        OFFradio = new javax.swing.JRadioButton();
        STDBYradio = new javax.swing.JRadioButton();
        TSTradio = new javax.swing.JRadioButton();
        WXONradio = new javax.swing.JRadioButton();
        WXAradio = new javax.swing.JRadioButton();

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MODE SELECTION");

        OFFradio.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        OFFradio.setText("OFF");
        OFFradio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OFFradioActionPerformed(evt);
            }
        });

        STDBYradio.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        STDBYradio.setText("STDBY");
        STDBYradio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                STDBYradioActionPerformed(evt);
            }
        });

        TSTradio.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        TSTradio.setText("TST");
        TSTradio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TSTradioActionPerformed(evt);
            }
        });

        WXONradio.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        WXONradio.setText("WXON");
        WXONradio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WXONradioActionPerformed(evt);
            }
        });

        WXAradio.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        WXAradio.setText("WXA");
        WXAradio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WXAradioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(WXAradio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WXONradio, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(TSTradio, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                        .addComponent(STDBYradio, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(OFFradio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(OFFradio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(STDBYradio, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TSTradio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(WXONradio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(WXAradio)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void OFFradioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OFFradioActionPerformed
        switch(currentMod) {
            case OFF:
                switchStateMods(StateMods.OFF);
                break;
            case WXON:
                switchStateMods(StateMods.OFF);
                break;
            case TST:
                switchStateMods(StateMods.OFF);
                break;
            case WXA:
                switchStateMods(StateMods.OFF);
                break;
            case STDBY:
                switchStateMods(StateMods.OFF);
                break;

       }

    }//GEN-LAST:event_OFFradioActionPerformed

    private void STDBYradioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_STDBYradioActionPerformed
        switch(currentMod) {
            case OFF:
                switchStateMods(StateMods.STDBY);
                break;
            case WXON:
                switchStateMods(StateMods.STDBY);
                break;
            case TST:
                switchStateMods(StateMods.STDBY);
                break;
            case WXA:
                switchStateMods(StateMods.STDBY);
                break;
            case STDBY:
                switchStateMods(StateMods.STDBY);
                break;

       }
    }//GEN-LAST:event_STDBYradioActionPerformed

    private void TSTradioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TSTradioActionPerformed
        switch(currentMod) {
            case OFF:
                switchStateMods(StateMods.TST);
                break;
            case WXON:
                switchStateMods(StateMods.TST);
                break;
            case TST:
                switchStateMods(StateMods.TST);
                break;
            case WXA:
                switchStateMods(StateMods.TST);
                break;
            case STDBY:
                switchStateMods(StateMods.TST);
                break;

       }
    }//GEN-LAST:event_TSTradioActionPerformed

    private void WXONradioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WXONradioActionPerformed
        switch(currentMod) {
            case OFF:
                switchStateMods(StateMods.WXON);
                break;
            case WXON:
                switchStateMods(StateMods.WXON);
                break;
            case TST:
                switchStateMods(StateMods.WXON);
                break;
            case WXA:
                switchStateMods(StateMods.WXON);
                break;
            case STDBY:
                switchStateMods(StateMods.WXON);
                break;

       }
    }//GEN-LAST:event_WXONradioActionPerformed

    private void WXAradioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WXAradioActionPerformed
        switch(currentMod) {
            case OFF:
                switchStateMods(StateMods.WXA);
                break;
            case WXON:
                switchStateMods(StateMods.WXA);
                break;
            case TST:
                switchStateMods(StateMods.WXA);
                break;
            case WXA:
                switchStateMods(StateMods.WXA);
                break;
            case STDBY:
                switchStateMods(StateMods.WXA);
                break;

       }
    }//GEN-LAST:event_WXAradioActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OFFradio;
    private javax.swing.JRadioButton STDBYradio;
    private javax.swing.JRadioButton TSTradio;
    private javax.swing.JRadioButton WXAradio;
    private javax.swing.JRadioButton WXONradio;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
